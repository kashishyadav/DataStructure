import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    static class SinglyLinkedListNode {
        public int data;
        public SinglyLinkedListNode next;

        public SinglyLinkedListNode(int nodeData) {
            this.data = nodeData;
            this.next = null;
        }
    }

    static class SinglyLinkedList {
        public SinglyLinkedListNode head;

        public SinglyLinkedList() {
            this.head = null;
        }

      
    }

    public static void printSinglyLinkedList(SinglyLinkedListNode node, String sep, BufferedWriter bufferedWriter) throws IOException {
        while (node != null) {
            bufferedWriter.write(String.valueOf(node.data));

            node = node.next;

            if (node != null) {
                bufferedWriter.write(sep);
            }
        }
    }

    // Complete the insertNodeAtTail function below.

    /*
     * For your reference:
     *
     * SinglyLinkedListNode {
     *     int data;
     *     SinglyLinkedListNode next;
     * }
     *
     */
      static SinglyLinkedListNode insertNodeAtHead(SinglyLinkedListNode head, int data) {
                SinglyLinkedListNode temp=new SinglyLinkedListNode(data);
                if(head==null)
                {
                    head=temp;
                    return head;
                }
                else{
                    temp.next=head;
                    head=temp;
                    return head;
                }

    }
    static SinglyLinkedListNode insertNodeAtTail(SinglyLinkedListNode head, int data) {

            SinglyLinkedListNode temp=head;
            SinglyLinkedListNode p=new SinglyLinkedListNode(data);
            if(head==null)
             { 
                  head=p;
                  }
            else
            { 
            while(temp.next!=null)
            {
                temp=temp.next;
            }
            temp.next=p;
            }
            return head;
    }
    static SinglyLinkedListNode insertNodeAtPosition(SinglyLinkedListNode head, int data, int position) {
         SinglyLinkedListNode n=new SinglyLinkedListNode(data);
         if(head==null)
         {
             head=n;
             return head;
         }
         else if(position==0)
         {
             n.next=head;
             head=n;
             return head;
         }
         SinglyLinkedListNode temp=head;
         SinglyLinkedListNode prev=temp.next;
         while(position>1)
         {
             temp=temp.next;
             prev=prev.next;
             position--;
         }
         temp.next=n;
         n.next=prev;
         return head;

    }

    private static final Scanner scanner = new Scanner(System.in);
